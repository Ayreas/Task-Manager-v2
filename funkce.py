# Definov√°n√≠ funkc√≠ z menu

from mysql.connector import Error    # Mus√≠m naimportovat Error zvl√°≈°≈• aby fungoval!
from db import pripojeni_db
from pomocne_funkce import odstranit_ukol_podle_id, aktualizovat_ukol_podle_id

def pridat_ukol(Nazev=None, Popis=None, interaktivni=True):
    """P≈ôid√° √∫kol do datab√°ze. O≈°et≈ôen√≠ prazdn√Ωch vstup≈Ø i neƒçekan√© ud√°losti (p≈ô: spadne datab√°ze)."""
    if not interaktivni:
        if Nazev is None or not Nazev.strip():
            raise TypeError("‚ùå N√°zev √∫kolu je povinn√Ω! Zkus to znovu.")
        if Popis is None or not Popis.strip():
            raise TypeError("‚ùå Popis √∫kolu je povinn√Ω! Zkus to znovu.")

    if not Nazev or not Nazev.strip():
        while True:
            Nazev = input("Zadej n√°zev √∫kolu: ").strip()
            if Nazev:
                break
            print("‚ùå N√°zev √∫kolu je povinn√Ω! Zkus to znovu.")

    if not Popis or not Popis.strip():
        while True:
            Popis = input("Zadej popis √∫kolu: ").strip()
            if Popis:
                break
            print("‚ùå Popis √∫kolu je povinn√Ω! Zkus to znovu.")
 
    conn = pripojeni_db()
    if conn is None:
        return

    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Ukoly (Nazev, Popis)VALUES (%s, %s)", (Nazev.strip(), Popis.strip()))
        conn.commit()
        print("‚úÖ √ökol byl √∫spƒõ≈°nƒõ ulo≈æen do datab√°ze.")
        
    except Error as e:
        print(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ √∫kolu: {e}")

    finally:
        cursor.close()
        conn.close()

def zobrazit_ukol():
    """Zobraz√≠ seznam v≈°ech √∫kol≈Ø s informacemi: ID, n√°zev, popis, stav, datum vytvo≈ôen√≠. O≈°et≈ôuje chyby ƒçi pr√°zdn√Ω seznam v DB."""
    conn = pripojeni_db()
    if conn is None:
        return
    
    try: 
        cursor = conn.cursor()
        cursor.execute("""
            SELECT UkolID, Nazev, Popis, Stav, Datum FROM Ukoly
            WHERE Stav IN ('Nezah√°jeno', 'Prob√≠h√°')
            ORDER BY UkolID
        """)
        ukoly = cursor.fetchall()

        if not ukoly:
            print("‚ùå Seznam √∫kol≈Ø je pr√°zdn√Ω!")
            return
        
        print("üìã Seznam √∫kol≈Ø:")
        for ukol in ukoly:
            print(f"üìå ID: {ukol[0]}, N√°zev: {ukol[1]}, Popis: {ukol[2]}, Stav: {ukol[3]}, Vytvo≈ôeno: {ukol[4].date()}")
    
    except Error as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ √∫kol≈Ø: {e}")
    
    finally:
        cursor.close()
        conn.close()

def aktualizovat_ukol():
    """Zmƒõna stavu √∫kolu, filtr na "Nezah√°jeno a Prob√≠h√°", Hotovo nen√≠ zahrnuto."""
    conn = pripojeni_db()
    if conn is None:
        return
    
    cursor = conn.cursor()
    
    try:
        # Zobrazen√≠ √∫kolu kde je stav Nezah√°jeno ƒçi Prob√≠h√°
        cursor.execute("""
            SELECT UkolID, Nazev, Stav FROM Ukoly 
            WHERE Stav IN ('Nezah√°jeno', 'Prob√≠h√°')  
            ORDER BY UkolID
        """)
        ukoly = cursor.fetchall()
        
        if not ukoly:
            print("‚ùå Seznam √∫kol≈Ø je pr√°zdn√Ω!")
            return
        
        print("üìã Seznam √∫kol≈Ø:")
        # P≈ôid√°n√≠ ikonek pro lep≈°i u≈æivatelskou p≈ô√≠vƒõtivost
        stav_map = {
        "Nezah√°jeno": "üõë Nezah√°jeno",
        "Prob√≠h√°": "‚è≥ Prob√≠h√°"
        }

        for ukol in ukoly:
            stav_text = stav_map[ukol[2]]  
            print(f"üìå ID: {ukol[0]}, N√°zev: {ukol[1]}, Stav: {stav_text}")

    except Error as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ √∫kol≈Ø: {e}")  

    # ƒå√°st kde vyb√≠r√°m √∫kol dle ID 
    while True:
        try:
            vybrane_id = int(input("\nZadej ID √∫kolu, kter√Ω chce≈° aktualizovat: "))
            print()
            cursor.execute("SELECT COUNT(*) FROM Ukoly WHERE UkolID = %s", (vybrane_id,))
            (count,) = cursor.fetchone()
            if count == 0:
                print("‚ùå Toto ID √∫kolu neexistuje, zkus to pros√≠m znovu.")
                continue
            break
        
        except ValueError:
            print("‚ùå Zadej pros√≠m platn√© ƒç√≠slo!")

    # T√≠mhle si z√≠skam p≈Øvodn√≠ stav do promƒõnn√© puvodni_stav
    cursor.execute("SELECT Stav FROM Ukoly WHERE UkolID = %s", (vybrane_id,))
    puvodni_stav = cursor.fetchone()[0]
    
    # ƒå√°st kdy mƒõn√≠m stav √∫kolu
    while True:
        try:
            print("üìã Vyber nov√Ω stav √∫kolu: ")
            print("1 - Prob√≠h√° ‚è≥")
            print("2 - Hotovo ‚úÖ\n")
            volba = int(input("Tvoje volba: "))

            if volba == 1:
                novy_stav = "Prob√≠h√°"
                break

            elif volba == 2:
                novy_stav = "Hotovo"
                break
            else:
                print("‚ùå Neplatn√° volba, zadej ƒç√≠slo 1 nebo 2.")
        except ValueError:
            print("‚ùå Zadej pros√≠m ƒç√≠slo.")

    # ƒå√°st kdy updatuji databazi
    try:
        uspesne = aktualizovat_ukol_podle_id(vybrane_id, novy_stav, conn)
        if uspesne:
            print("‚úÖ Stav √∫kolu byl √∫spƒõ≈°nƒõ aktualizov√°n.\n")
        else:
            print("‚ùå Nepoda≈ôilo se aktualizovat stav √∫kolu.")
            return

        while True:
            zpet = input("Chce≈° vr√°tit zmƒõnu? (a/n): ").lower()
            if zpet == 'a':
                aktualizovat_ukol_podle_id(vybrane_id, puvodni_stav, conn)
                print("‚Ü©Ô∏è Zmƒõna byla vr√°cena zpƒõt.")
                break
    
            elif zpet == 'n':
                print("‚úÖ Zmƒõna potvrzena.")
                break
            else:
                print("‚ùå Neplatn√° volba. Zadej pros√≠m 'a' pro vr√°cen√≠ nebo 'n' pro potvrzen√≠.")

    except Error as e:
        print(f"‚ùå Chyba p≈ôi aktualizaci √∫kolu: {e}")
    finally:
        cursor.close()
        conn.close()

def odstranit_ukol():
    """Odstranƒõn√≠ √∫kolu z datab√°ze po vybr√°n√≠ ID."""
    conn = pripojeni_db()
    if conn is None:
        return
    
    cursor = conn.cursor()

    # Nejd≈ô√≠v zobraz√≠m √∫koly z datab√°ze
    try:
        cursor.execute("SELECT UkolID, Nazev, Stav FROM Ukoly ORDER BY UkolID")
        ukoly = cursor.fetchall()

        if not ukoly:
            print("‚ùå Nejsou k dispozici ≈æ√°dn√© √∫koly pro odstranƒõn√≠.")
            return        

        print("üìã Seznam √∫kol≈Ø:")
        for ukol in ukoly:
            print(f"üìå ID: {ukol[0]}, N√°zev: {ukol[1]}, Stav: {ukol[2]}")

    except Error as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ √∫kol≈Ø: {e}")
        return
    
    # V√Ωbƒõr ID √∫kolu k odstranƒõn√≠
    while True:
        try:
            vybrane_id = int(input("\nZadej ID √∫kolu, kter√Ω chce≈° odstranit: "))
            print()
            cursor.execute("SELECT COUNT(*) FROM Ukoly WHERE UkolID = %s", (vybrane_id,))
            (count,) = cursor.fetchone()
            if count == 0:
                print("‚ùå Toto ID √∫kolu neexistuje, zkus to pros√≠m znovu.")
                continue
            break

        except ValueError:
            print("‚ùå Zadej pros√≠m platn√© ƒç√≠slo!")
    
    while True:
        potvrzeni = input("‚ö†Ô∏è  Opravdu chce≈° √∫kol odstranit? (a/n): ").lower()
        print()

        if potvrzeni == 'a':
            try:
                uspesne = odstranit_ukol_podle_id(ukol_id=vybrane_id, conn=conn)
                if uspesne:
                    print("üóëÔ∏è  √ökol byl √∫spƒõ≈°nƒõ odstranƒõn.")
                else:
                    print("‚ùå √ökol se nepoda≈ôilo odstranit.")
            except Error as e:
                print(f"‚ùå Chyba p≈ôi odstra≈àov√°n√≠ √∫kolu: {e}")
            break


        elif potvrzeni == 'n':
            print("‚ÑπÔ∏è  Odstranƒõn√≠ bylo zru≈°eno.")
            cursor.close()
            conn.close()
            return

        else:
            print("‚ùå Neplatn√° volba. Zadej pros√≠m 'a' pro smaz√°n√≠ nebo 'n' pro zru≈°en√≠.")

def reset_tabulky():
    """Vyma≈æe v≈°echna data z tabulky Ukoly a resetuje ID znovu na 1!"""
    conn = pripojeni_db()
    if conn is None:
        return
    
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM Ukoly")                    # Sma≈æe v≈°e z tabulky Ukoly
        cursor.execute("ALTER TABLE Ukoly AUTO_INCREMENT = 1") # Reset ID na 1.
        conn.commit()
        print("üßπ Data v tabulce Ukoly byla vymaz√°na a ID resetov√°no.")
    
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi maz√°n√≠ dat tabulky: {e}")
    
    finally:
        cursor.close()
        conn.close()    